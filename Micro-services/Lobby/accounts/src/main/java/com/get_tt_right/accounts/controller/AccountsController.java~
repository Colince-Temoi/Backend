package com.get_tt_right.accounts.controller;

import com.get_tt_right.accounts.constants.AccountsConstants;
import com.get_tt_right.accounts.dto.CustomerDto;
import com.get_tt_right.accounts.dto.ErrorResponseDto;
import com.get_tt_right.accounts.dto.ResponseDto;
import com.get_tt_right.accounts.service.IAccountsService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

/** The Controller layer is only responsible to accept the requests,perform any validations if needed and then pass the request to the service layer. Finally, it will return the response back to the client.
 * */

/** To provide specific information which is specific to the APIs present inside this controller. We need to leverage an annotation called @Tag.
 * This annotation is also present inside the package of swagger and openapi spring doc.
 * We have a parameter name using which we can provide some basic summery about all the APIs present inside this controller.
 * We have a parameter description using which we can provide some detailed description about all the APIs present inside this controller. It should always make sense to you.
 * Now if you refresh the swagger UI, you will see that the information is updated. You should now see a beautiful name + description of this controller. This is more professional to the clients.
 * They can easily understand that under this controller/section, what all APIs are present and what they do.
 * */

@Tag(
        name = "CRUD REST APIs for Accounts in EazyBank",
        description = "CRUD REST APIs in EazyBank to CREATE, UPDATE, FETCH AND DELETE account details"
)
@RestController
@AllArgsConstructor
@RequestMapping(path="/api", produces = {MediaType.APPLICATION_JSON_VALUE})
@Validated // This annotation will tell to my spring boot framework to perform validation on all the REST APIs that I have defined in this AccountsController.
public class AccountsController {
    private IAccountsService iAccountsService;

    /** The annotation @Operation is used to provide the basic information about a specific REST API.
     * Using summary parameter, we can provide a short description about the REST API.
     * Using description parameter, we can provide a detailed description about the REST API.
     * If you refresh the swagger UI, you will see that the information is updated. You should now see a beautiful summary + description of this REST API.
     * For the request body, it may look a bit of descent by default. But we have room for improvement.
     * For the response, it is going to show a default code 200  and message 'OK' and a default response schema as defined in our ResponseDto. We can also improve this, especially given that I'm not returning a 200 OK response in my REST API. I'm returning a 201 + some other  message which is specific to 201 in my response.
     * So how can we communicate this to the swagger UI? We can do this by using another annotation called @ApiResponse which wil override the default response code and message we were seeing in the swagger UI.
     * Using the parameter responseCode, we can provide the actual response code that we are returning from our REST API.
     * Using the parameter description, we can provide the actual message that we are returning from our REST API.
     * If our endpoint has a possibility of returning one among multiple response codes, we can provide multiple @ApiResponse annotations inside the @ApiResponses annotation.
     * This will clearly give a heads-up to my clients, developers or testers that this REST API can return multiple response codes and messages.
     * Using the content parameter, we can provide the schema of the response that we are returning from our REST API. To it we are assigning the @Schema annotation and inside it, to the implementation parameter we are assigning the class name of the schema that we are returning from our REST API.
     * In this way, I am telling to my Spring doc that  there is a good chance that a 500 error can be returned  and whenever that happens ,I am going to send an error response by following the contract/schema that I have defined in my ErrorResponseDto class.
     * This I have done for all my 4 REST APIs. I mean, I have passed @ApiResponse annotation inside the @ApiResponses annotation for all my REST APIs because any of them can have a RuntimeException.
     * That's why with the Response code 500, a description of Internal Server Error, I have mentioned that I am going to send the content with the schema of and the schema of ErrorResponseDto. I have provided a clear contract to my clients, developers, or testers that whenever a 500 error happens, this is the response that they can expect.
     *
     * */
    @Operation(
            summary = "Create Account REST API",
            description = "REST API to create new Customer &  Account inside EazyBank"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "201",
                    description = "HTTP Status CREATED"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @PostMapping("/create")
    public ResponseEntity<ResponseDto> createAccount(@Valid @RequestBody CustomerDto customerDto) {
        iAccountsService.createAccount(customerDto);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(new ResponseDto(AccountsConstants.STATUS_201, AccountsConstants.MESSAGE_201));
    }

    @Operation(
            summary = "Fetch Account Details REST API",
            description = "REST API to fetch Customer &  Account details based on a mobile number"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @GetMapping("/fetch")
    public ResponseEntity<CustomerDto> fetchAccountDetails(@RequestParam
                                                               @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")
                                                               String mobileNumber) {
        CustomerDto customerDto = iAccountsService.fetchAccount(mobileNumber);
        return ResponseEntity.status(HttpStatus.OK).body(customerDto);
    }

    /** This operation is going to have one more extra ApiResponse annotation to accommodate the business exception that can be thrown from the service layer.
     * The same also applies to the deleteAccountDetails REST API.
     * Now if you go to the swagger UI, you will see that the information is updated. You should now see a beautiful summary + description of this REST APIs.
     * */
    @Operation(
            summary = "Update Account Details REST API",
            description = "REST API to update Customer &  Account details based on a account number"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "417",
                    description = "Expectation Failed"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @PutMapping("/update")
    public ResponseEntity<ResponseDto> updateAccountDetails(@Valid @RequestBody CustomerDto customerDto) {
        boolean isUpdated = iAccountsService.updateAccount(customerDto);
        if(isUpdated) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(new ResponseDto(AccountsConstants.STATUS_200, AccountsConstants.MESSAGE_200));
        }else{
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseDto(AccountsConstants.STATUS_417, AccountsConstants.MESSAGE_417_UPDATE));
        }
    }

    @Operation(
            summary = "Delete Account & Customer Details REST API",
            description = "REST API to delete Customer &  Account details based on a mobile number"
    )
    @ApiResponses({
            @ApiResponse(
                    responseCode = "200",
                    description = "HTTP Status OK"
            ),
            @ApiResponse(
                    responseCode = "417",
                    description = "Expectation Failed"
            ),
            @ApiResponse(
                    responseCode = "500",
                    description = "HTTP Status Internal Server Error",
                    content = @Content(
                            schema = @Schema(implementation = ErrorResponseDto.class)
                    )
            )
    }
    )
    @DeleteMapping("/delete")
    public ResponseEntity<ResponseDto> deleteAccountDetails(@RequestParam
                                                                @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits")
                                                                String mobileNumber) {
        boolean isDeleted = iAccountsService.deleteAccount(mobileNumber);
        if(isDeleted) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body(new ResponseDto(AccountsConstants.STATUS_200, AccountsConstants.MESSAGE_200));
        }else{
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseDto(AccountsConstants.STATUS_417, AccountsConstants.MESSAGE_417_DELETE));
        }
    }

}
