spring.application.name=SpringDataJpa

# Localhost - To represent local MySQL DB server
# useSSL=false - To disable SSL connection as we are not going to use it
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce1?useSSL=false

spring.datasource.username=root
spring.datasource.password=Tmi@2022

# No need to add driver class name here because Spring boot will automatically detect that as per driver dependencies in the pom.xml
# In our case based on the MySQL CJ dependency

# Whatever the DB you are using i.e., In our case we are using MySQL DB, Hence we are adding MySQL Hibernate Dialect as shown below
# Hibernate generates SQL queries for the specific database based on the dialect class
# If you are using other DB's i.e., Postgres, then Postgres Sql hibernate dialect you need to add.
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# none, create-only, drop, create, create-drop, validate, update   - Possible options Hibernate provides to customize the Hibernate Data schema generation process.
# none - Disables the hbm2ddl auto tool, so hibernate is not going to take any acton for managing the underlying database schema
#        Nothing but Hibernate is not going to create database tables for you. Manually you have to do it by yourself.
#        hbm2ddl auto tool - provided by Hibernate to generate the database tables behind the scenes for us.

# create-only - Tells Hibernate to generate the database schema from the entity models you are going to create in your Spring boot application
#             - You must thus be accurate with the relationships your entity model will have. Entity Model Design.
# drop - This option tells Hibernate to drop the database schema using the entity model as a reference for the DDL DROP statement
#      -  It basically instructs Hibernate that, just drop all the tables by referring the JPA models we created in our Spring boot application.
# create - This option tells Hibernate to drop the database schema and recreate it afterward using the entity model as a reference.
#         - Can be a useful option if you have made changes in your Entities Design.
# create-drop - Tells Hibernate to drop the database schema and recreate it afterward using the entity model as reference And, upon closing the EntityManagerFactory or Hibernate SessionFactory, the database schema will be dropped again.
# validate  - Tells Hibernate to validate the underlying database schema against the entity mappings which we have done in the Spring boot application.
#           - As in , Is your Database design matching the Entity design?
#            - This can be useful if you had already designed the schema yourself.
# update - This option tells Hibernate that update/alter the existing schema/ database tables per entity mapping changes.
#         - In most of the cases we will always be leveraging this option.
spring.jpa.hibernate.ddl-auto = update

# More Hibernate properties to show the SQL statements that Hibernate generates behind the scenes and verifying that the SQL statements are well formatted.
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

