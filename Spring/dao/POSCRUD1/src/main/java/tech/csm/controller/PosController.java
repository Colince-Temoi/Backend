package tech.csm.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import tech.csm.domain.BillerVo;
import tech.csm.domain.ProductVo;
import tech.csm.domain.TransactionVo;
import tech.csm.service.BillerService;
import tech.csm.service.BillerServiceImpl;
import tech.csm.service.ProductService;
import tech.csm.service.ProductServiceImpl;
import tech.csm.util.DBUtil;

public class PosController {

	private static Scanner scanner;
	private static ProductService productService;
	private static BillerService billerService;

	public PosController() {
		scanner = new Scanner(System.in);
		productService = new ProductServiceImpl();
		billerService = new BillerServiceImpl();
	}

	public static void main(String[] args) {

//		Create object of controller to initialize things up
		new PosController();

		int choice;
		char ck = 'n';
		do {
			System.out.println("\n1.Create Bill-Biller Inf\n2.Show Bill\n" + "3.Exit\n" + "Enter your Choice : ");
			choice = scanner.nextInt();
			switch (choice) {
			case 1:
//				We need some helpers here; All products we need to display to the user. Also get Product by id behavior we need.
//				List<ProductVo> productVos = productService.getAllProducts();

//				We need to get product by id behaviour as well
//				ProductVo retunredProductVo = productService.getProductById(1);

//				Create a store to hold biller Information.
				BillerVo billerVo = new BillerVo();

//				Accept Biller details and set them into BillerVo
//				We are not asking the user for billerId because it will be auto-generated
//				Accept customer name
				System.out.println("Enter your name");
				billerVo.setBillerName(scanner.next());

//				Accept customer phone number
				System.out.println("Enter your Phone number");
				billerVo.setPhoneNumber(scanner.next());

//				Generate the date and store it as bill date.
				billerVo.setBillDate(new SimpleDateFormat("dd/MM/yyyy").format(new Date()));
				
				billerVo.setBillDate(new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
				
//				biller id will be autogenerated once we save the Biller data into DB

//				total purchase amount will be calculated for each products we need to purchase and will be cumulatively added.
				Double totalPurchaseAmount = 0.0;

//				Now it about preparing input for the 3rd table: Tx's table
//				First create a store to store a list of Tx's: because a user can make multiple transactions

				List<TransactionVo> transactionVos = new ArrayList<>();
				TransactionVo transactionVo = null;

//				List<ProductVo> productVos2 = new ArrayList<>();

//				List<BillerVo> billerVos = new ArrayList<>();

//				TxId will be autogenerated once an insert is complete
//				ProductVo id we need to set.
				do {

					transactionVo = new TransactionVo();

					List<ProductVo> productVos = productService.getAllProducts();

					System.out.println();
//					Show the list of available products to the user and ask them to enter the product id they need to purchase
					for (ProductVo productVo2 : productVos) {
						System.out.println(productVo2);
					}
//					Accept the product id from the user to get that product by id because we need to store its reference in TxVo object
//					First Create a store to hold this data.	
//					TransactionVo transactionVo = new TransactionVo();

					System.out.println("/nEnter the product id");
					String prodId = scanner.next();

					ProductVo productVo = productService.getProductById(Integer.parseInt(prodId));
//					productVos2.add(productVo);

					transactionVo.setProductVo(productVo);

//					Ask the user the number of units he/she wants to purchase
					System.out.println("/nEnter the number of units you need to purchase");
					String nounits = scanner.next();
//					Check if the user entered number of units is < the available stock
					if (Integer.parseInt(nounits) < Integer.parseInt(productVo.getStock())) {
//						Now you can set the number of units
						transactionVo.setNumberofUnits(nounits);

//						Inside this method since we have the number of units the user wishes to purchase, we can claculate the total price.
						Double totalAmount = Integer.parseInt(nounits) * Double.parseDouble(productVo.getUnitPrice());

//						Set the total Amount for each each products number of units purchased.
						transactionVo.setTotalAmount(totalAmount.toString());

//						Cumulatively add the total amount for each purchased product to the global total purchase amount.
						totalPurchaseAmount += totalAmount;

//						Set the BillerVo object into TransactionVo object. Do not set this; we will take it as a separate input.
//						transactionVo.setBillerVo(billerVo);

//						Now add the TxVo into the list
						transactionVos.add(transactionVo);

					} else {
//						Straight away return a message to the end user telling him that he cant purchase many products thann the available stsock
						System.out.println("You cannot purchase " + nounits + " units because, the vailable stock is "
								+ productVo.getStock() + " try buying lesser of units");
					}

//					Ask user if they want to buy more products
					System.out.println("/nDo you want to buy more products[y/n]");
					ck = scanner.next().charAt(0);

				} while (ck != 'n');

//				Set the cumulative total purchase amount to BillerVo now
				billerVo.setTotalPurchaseAmount(totalPurchaseAmount.toString());

				/*
				 * System.out.println(billerVo);
				 * 
				 * for (TransactionVo x : print) { System.out.println(x); }
				 */
				
//				Invoke service layer method to perform some conversions to dto for this vo data
				String msg = billerService.createBill(billerVo,transactionVos);

				break;
			case 2:
//				Show Bill || Generate receipt
				break;

			case 3:

				System.out.println("Are you sure [y/n]:");
				ck = scanner.next().charAt(0);
				if (ck == 'y')
					DBUtil.closeConnection();
				break;
			default:
				System.out.println("invalid option!!");
			}

		} while (choice != 3 || (choice == 3 && ck != 'y'));

	}

}
