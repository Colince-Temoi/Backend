package com.eazybytes.controller;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreFilter;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.eazybytes.model.Contact;
import com.eazybytes.repository.ContactRepository;

@RestController
public class ContactController {

    @Autowired
    private ContactRepository contactRepository;

//    @PostMapping("/contact")
//    public Contact saveContactInquiryDetails(@RequestBody Contact contact) {
//        contact.setContactId(getServiceReqNumber());
//        contact.setCreateDt(new Date(System.currentTimeMillis()));
//        return contactRepository.save(contact);
//    }
    /* Think of a scenario where I don't want to accept any contact details with the name as Test
     * I can use the @PreFilter annotation to filter the contact details based on the contact name
     * This would indicate to me that someone is trying to test the application, and really I don't want to accept any contact details with the name as Test.
     * I mean, I don't want to take that data seriously and insert into the database.
    * */
    @PostMapping("/contact")
     @PreFilter("filterObject.contactName != 'Test'")
//    @PostFilter("filterObject.contactName != 'Test'")
    public List<Contact> saveContactInquiryDetails(@RequestBody List<Contact> contacts) {
        Contact contact = contacts.get(0);
        contact.setContactId(getServiceReqNumber());
        contact.setCreateDt(new Date(System.currentTimeMillis()));
        contact = contactRepository.save(contact);
        List<Contact> returnContacts = new ArrayList<>();
        returnContacts.add(contact);
        return returnContacts;
    }


    /* I am going to generate a random number for the service request number
     * This is prefixed with SR and followed by a random number. SR stands for Service Request
     * This is a unique number for each contact inquiry
     * */
    public String getServiceReqNumber() {
        Random random = new Random();
        int ranNum = random.nextInt(999999999 - 9999) + 9999;
        return "SR"+ranNum;
    }


}