spring.datasource.url=jdbc:mysql://spring-security.c7gwie8sqa31.af-south-1.rds.amazonaws.com:3306/eazybank
spring.datasource.username=admin
spring.datasource.password=Tmi#2022
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Prior to the below immediate configuration, my Resource Server didn't have any clue on how to connect with the auth server to validate the access tokens that it received from the client/third party application.
# To provide this information to the Resource Server, we need to configure a property called spring.security.oauth2.resourceserver.jwt.jwk-set-uri. This property is used to specify the URI of the JSON Web Key (JWK) Set document
# Since right now we are using the jwt tokens as the  format of the access tokens, we need to make sure we are configuring this property to point to the correct URI of the JWK Set document.
# To this property we need to provide the value of from the Authentication Server. Inside your KeyCloak Authentication Server, select the realm that you are working with, then go to the Realm Settings, then go to the Keys tab, On the General tab, at the end of the page, you will see an endpoints field with a hyperlink of http://localhost:8081/realms/eazybankdev/.well-known/openid-configuration.
# Click on this endpoint, and you will get all the details around the auth server inside the page that comes up. At the moment we are interested in the property 'jwks_uri' . we need to copy its value and paste it in the value of the property spring.security.oauth2.resourceserver.jwt.jwk-set-uri
# The value itself is also a hyperlink http://localhost:8081/realms/eazybankdev/protocol/openid-connect/certs which if you try to open inside your browser, you will see that there are certain keys that are provided by the auth server.
# Using these keys, any resource server should be able to validate whether the access token that it has received from the client/third party application is valid or not.
# Behind the scenes like we discussed previously, what is going to happen is, always the auth server while it is trying to generate an access token it is going to digitally sign it with a private key whereas anyone who want to validate of the access token is valid or not, all such parties they need to take this public keys http://localhost:8081/realms/eazybankdev/protocol/openid-connect/certs, and using these public keys only the resource servers or any other applications should be able to validate if a given access token is valid or not.
# That's the purpose of this, http://localhost:8081/realms/eazybankdev/protocol/openid-connect/certs, certs url. And its the same that we have configured below.
# With the below configuration, what is going to happen is, during the startup, my resource server is going to download this certificate details or public key details from the auth server, and it is going to cache it. And whenever it receives an access token from the client/third party application, it is going to validate the access token using the public keys that it has downloaded from the auth server without the need of connecting to the auth server again and again for each and every request.
# Whereas if you follow the opaque style of access tokens then for each and every request the resource server is going to make a call to the auth server in order to validate the access token. So, this is the advantage of using the jwt tokens as the format of the access tokens.
# Later, we will see a demo of opaque style of access tokens as well.
# For now, you should be clear on why we are setting the below property and what is the purpose of it.
# I changed the property value by providing dollar, curly braces and inside this curly braces i have mentioned the environment variable as JWK_SET_URI so that incase if you want to pass this property value as an environment variable then you can use JWK_SET_URI as a property name and provide the value of the property as the URI of the JWK Set document.
# Otherwise, I am setting the else value as http://localhost:8081/realms/eazybankdev/protocol/openid-connect/certs where I am going to mention the localhost value.
# Copy this same configuration property and paste it in the application_prod.properties file as well.
# This openid configuration http://localhost:8081/realms/eazybankdev/.well-known/openid-configuration endpoint is a very famous endpoint and it is a standard that is being followed by all the auth servers inside the industry.
# Anyone who is building an auth server by following the oauth2 and openId standards they need to make sure they are exposing all the auth server related information with the help of this url http://localhost:8081/realms/eazybankdev/.well-known/openid-configuration
# For example, if you are looking for the details of the auth server that is build by google, then you can use the url https://accounts.google.com/.well-known/openid-configuration
# If you do a comparison between what is present inside the url http://localhost:8081/realms/eazybankdev/.well-known/openid-configuration and https://accounts.google.com/.well-known/openid-configuration, you will notice that the same kind of information is being exposed by both the auth servers.
# Up to mow, I presume we have completed all the resource server related changes. Now, do a build and start your application to see if there are any surprises.
# Start the application in debug mode. And before that in the environment variables, you don't need to set the JWT_SECRET variable and so remove that as we don't need it anymore.
# Click on Apply then click on Debug option in the Run/debug configurations page/pop-up.
# Hurreey, the application started successfully at the port 8080 without any issues. You should be clear with what we have discussed so far. From the next lecture lets see the magic of oauth2 framework. Check your notebook for the complete discussion.

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWK_SET_URI:http://localhost:8081/realms/eazybankdev/protocol/openid-connect/certs}